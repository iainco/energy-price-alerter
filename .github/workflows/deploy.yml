- name: Deploy to server
  env:
    SSH_HOST: ${{ secrets.SSH_HOST }}
    SSH_USER: ${{ secrets.SSH_USER }}
    APP_PATH: ${{ secrets.APP_PATH }}
    BRANCH_NAME: ${{ github.ref_name }}
    GITHUB_REPOSITORY: ${{ github.repository }}
  run: |
ssh "${SSH_USER}@${SSH_HOST}" <<EOF
set -euo pipefail

APP_PATH="$APP_PATH"
BRANCH_NAME="$BRANCH_NAME"
RELEASE_NAME=$(date +"%Y%m%d%H%M%S")
RELEASE_PATH="${APP_PATH}/releases/${RELEASE_NAME}"
CURRENT_SYMLINK="${APP_PATH}/current"
SHARED_DB="${APP_PATH}/database.sqlite"
RELEASE_DB="${RELEASE_PATH}/database/database.sqlite"

echo "APP_PATH=$APP_PATH"
echo "BRANCH_NAME=$BRANCH_NAME"
echo "--- Starting deployment to $APP_PATH ---"

## Directories & Permissions
echo "Creating new release directory: $RELEASE_PATH"
mkdir -p "$RELEASE_PATH"

echo "Cloning repository branch '$BRANCH_NAME' into $RELEASE_PATH"
git clone --depth 1 --branch "$BRANCH_NAME" "https://github.com/${GITHUB_REPOSITORY}.git" "$RELEASE_PATH"

echo "Setting permissions..."
sudo chown -R www-data:www-data "$RELEASE_PATH/storage" "$RELEASE_PATH/bootstrap/cache"
sudo chmod -R 775 "$RELEASE_PATH/storage" "$RELEASE_PATH/bootstrap/cache"

ln -nfs "$APP_PATH/.env" "$RELEASE_PATH/.env"

cd "$RELEASE_PATH"

## Composer
echo "Installing Composer dependencies..."
composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

## Database
# Check if a shared DB already exists. This is the preferred state.
if [ -f "$SHARED_DB" ]; then
    echo "Shared SQLite DB found, ensuring release uses it."
    # Remove any existing release copy as it's not needed.
    if [ -f "$RELEASE_DB" ]; then
        rm -f "$RELEASE_DB"
    fi
else
    echo "No SQLite DB found, creating new empty DB..."
    touch "$SHARED_DB"
fi

echo "Symlinking shared SQLite DB into release..."
ln -nfs "$SHARED_DB" "$RELEASE_DB"

echo "Running database migrations..."
php artisan migrate --force

## NPM
if [ -f "package.json" ]; then
  echo "Installing Node.js dependencies and building assets..."
  npm install --production

  if [ -f "vite.config.js" ] || [ -f "vite.config.ts" ]; then
    ./node_modules/.bin/vite build
  fi
else
  echo "No package.json found, skipping Node.js steps."
fi

## Optimise & Cache
echo "Optimizing Laravel application..."
php artisan optimize

echo "Clearing caches..."
php artisan cache:clear

# Queue (TODO: make this conditional depending on .env's QUEUE_CONNECTION?)
# php artisan queue:restart
# php artisan horizon:terminate

## Switch current & Purge
echo "Switching 'current' symlink to new release..."
ln -nfs "$RELEASE_PATH" "$CURRENT_SYMLINK.tmp"
mv -T "$CURRENT_SYMLINK.tmp" "$CURRENT_SYMLINK"
echo "Symlink switched to $RELEASE_PATH"

# echo "Cleaning up old releases..."
# ls -dt "${APP_PATH}"/releases/* 2>/dev/null | tail -n +6 | xargs -r rm -rf
# echo "Deployment complete!"
EOF
